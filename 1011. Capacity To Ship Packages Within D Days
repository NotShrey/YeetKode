1011. Capacity To Ship Packages Within D Days


class Solution {
public:
    int findD(vector<int>& weights, int cap) {
        int day = 1;
        int load = 0;
        int n = weights.size();

        for (int i = 0; i < n; i++) {
            if (load + weights[i] > cap) {
                day++;
                load = weights[i];
            } else {
                load += weights[i];
            }
        }
        return day;
    }

    int shipWithinDays(vector<int>& weights, int days) {
        int low = *max_element(weights.begin(),weights.end());
       int high = accumulate(weights.begin(), weights.end(), 0);

       while(low<=high){
           int mid = (low+high)/2;
           int noOfDays = findD(weights,mid);
           if(noOfDays<=days){
               high = mid-1;
           }
           else{
               low = mid+1;
           }
           
       }
       return low;
    }
       
       
};

//o(nlogn)


//another sol but it says TLE

// class Solution {
// public:
//     int findD(vector<int>& weights, int cap) {
//         int day = 1;
//         int load = 0;
//         int n = weights.size();

//         for (int i = 0; i < n; i++) {
//             if (load + weights[i] > cap) {
//                 day++;
//                 load = weights[i];
//             } else {
//                 load += weights[i];
//             }
//         }
//         return day;
//     }

//     int shipWithinDays(vector<int>& weights, int days) {
//         int maxi = *max_element(weights.begin(),weights.end());
//        int sum = accumulate(weights.begin(), weights.end(), 0);
//         for(int i = maxi;i<sum;i++){
//             if(findD(weights,i)<=days){
//                 return i;
//             }
//         }
//         return -1;
//     }
// };

// //o(n^2) sol could be better using bs
